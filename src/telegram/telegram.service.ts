import { Inject, Injectable } from '@nestjs/common'
import { Op } from 'sequelize'
import { Match } from 'src/models/match.model'
import { Predictions } from 'src/models/predictions.model'
import { Markup, Telegraf } from 'telegraf'
import { WINSTON_MODULE_PROVIDER } from 'nest-winston' // winston churchill
import { Logger } from 'winston' // logger to file
import { PredictionService } from 'src/prediction/prediction.service'
import { MatchesService } from 'src/matches/matches.service'

@Injectable()
export class TelegramService {
  private readonly bot: Telegraf

  constructor(
    private readonly predictionService: PredictionService,
    private readonly matchesService: MatchesService,
    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,
  ) {
    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN)
    this.setupListeners()
  }

  private setupListeners() {
    // command handler
    //this.bot.start((ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç.'))
    this.bot.start((ctx) => this.showMainMenu(ctx))
    this.bot.hears('–ù–µ–¥–∞–≤–Ω–∏–µ –∏–≥—Ä—ã', async (ctx) => this.showRecentGames(ctx))
    this.bot.hears('–¢–µ–∫—É—â–∏–µ –∏–≥—Ä—ã', async (ctx) => this.showCurrentGames(ctx))
    this.bot.action(/^finished_game_(\d+)/, async (ctx) =>
      this.showFinishedGameDetails(ctx),
    )
  }

  async sendMessage(chatId: number, text: string) {
    await this.bot.telegram.sendMessage(chatId, text)
  }

  async showMainMenu(ctx) {
    return ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.keyboard([
        ['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
        ['–¢–µ–∫—É—â–∏–µ –∏–≥—Ä—ã'],
        ['–ù–µ–¥–∞–≤–Ω–∏–µ –∏–≥—Ä—ã'],
      ]).resize(),
    )
  }

  async showCurrentGames(ctx) {
    try {
      const predictions =
        await this.predictionService.getCurrentPredictionFromDB() // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Predictions
      console.log('current ' + JSON.stringify(predictions))
      let message = '–¢–µ–∫—É—â–∏–µ –∏–≥—Ä—ã:\n'
      let matchesDetails = []

      const inlineKeyboard = Markup.inlineKeyboard(
        predictions.map((prediction, index) => {
          let buttonText = ''

          buttonText = ` ${prediction?.radiant_team_name || prediction?.radiant_team_id} vs ${prediction?.dire_team_name || prediction?.dire_team_id}`

          return [
            Markup.button.callback(
              buttonText,
              `current_game_${prediction.match_id}`,
            ),
          ]
        }),
      )
      await ctx.reply(message, inlineKeyboard)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä:', error)
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä.')
    }
  }

  async showRecentGames(ctx) {
    try {
      const predictions =
        await this.predictionService.getFinishedPredictionFromDB()
      let message = '–ù–µ–¥–∞–≤–Ω–∏–µ –∏–≥—Ä—ã:\n'
      let matchesDetails = []
      for (const prediction of predictions) {
        const matchDetails = await this.matchesService.getMatchFromDB(
          prediction.match_id,
        )
        matchesDetails.push(matchDetails)
        //message += `Match ID: ${prediction.match_id}\n\n`
      }
      const inlineKeyboard = Markup.inlineKeyboard(
        predictions.map((prediction, index) => {
          let buttonText = ''

          if (prediction.did_radiant_win) {
            buttonText = `üü¢ ${matchesDetails[index].radiantteamname} vs ${matchesDetails[index].direteamname}`
          } else {
            buttonText = `${matchesDetails[index].radiantteamname} vs ${matchesDetails[index].direteamname} üî¥`
          }

          return [
            Markup.button.callback(
              buttonText,
              `finished_game_${prediction.match_id}`,
            ),
          ]
        }),
      )
      await ctx.reply(message, inlineKeyboard)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–≥—Ä:', error)
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–≥—Ä.')
    }
  }

  async showFinishedGameDetails(ctx) {
    const matchId = parseInt(ctx.match[1], 10)
    try {
      const prediction =
        await this.predictionService.getPredictionFromDB(matchId)
      const match = await this.matchesService.getMatchFromDB(matchId)
      if (prediction && match) {
        const firstBloodTimeFormatted = this.getTimeByUnix(
          prediction.firstblood_time,
        )
        const predictionFirstBloodFormatted = this.getTimeByUnix(
          prediction.prediction_firstblood_result,
        )
        if (match.did_radiant_win !== null) {
          let message = `–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã:\n`
          message += `Match ID: ${prediction.match_id}\n`
          if (prediction.did_radiant_win) {
            message += `–ö–æ–º–∞–Ω–¥—ã: ‚úîÔ∏è${match.radiantteamname} vs ${match.direteamname}\n`
          } else {
            message += `–ö–æ–º–∞–Ω–¥—ã: ${match.radiantteamname} vs ${match.direteamname}‚úîÔ∏è\n`
          }
          message += `–ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å: ${firstBloodTimeFormatted}\n`
          message += `–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: ${prediction.prediction_result}\n`
          message += `–ü—Ä–æ–≥–Ω–æ–∑ –ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å: ${predictionFirstBloodFormatted}\n`
          await ctx.reply(message)
        }
      } else {
        await ctx.reply(`–ò–≥—Ä–∞ —Å ID ${matchId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏–≥—Ä—ã:', error)
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏–≥—Ä—ã.')
    }
  }

  getTimeByUnix(time: number): string {
    const TimeMsec = new Date(time * 1000)
    const timeFormatted = [
      String(TimeMsec.getUTCHours()).padStart(2, '0'),
      String(TimeMsec.getUTCMinutes()).padStart(2, '0'),
      String(TimeMsec.getUTCSeconds()).padStart(2, '0'),
    ].join(':')

    return timeFormatted
  }

  startBot() {
    this.bot.launch()
  }

  stopBot() {
    this.bot.stop()
  }

  async onModuleInit() {
    // start Bot when module is loaded
    this.startBot()
  }
}
